#import aiogram
from aiogram import Bot, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from asgiref.sync import sync_to_async
from functools import wraps
from datetime import datetime
from main.API_TG.configs.loader import dp, bot
from main.models import (
    CustomUser,
    Student,
    Laboratory_Status,
    EducationalGroup,
)
from utils import (
    AsyncAtomicContext,
    is_student_register,
    create_laboratory_status_one_student,
    generator_qr,
    get_laboratory_status,
)

commands = ["/start","/menu","/help"]
goMenu = ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
buttonRregister = ["–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"]
backButton = ["Ô∏è–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è"]
main_menu_button = ["–ú–µ–Ω—é"]
mainMenu = ["–ì–µ–Ω–µ—Ä–∞—Ü–∏—è","–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]
labs = ["–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞","–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ","–î–∏—Å–∫—Ä–µ—Ç–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"]
informationLabs = ["#1","#2","#3","#4","#5","–†–æ–±–æ—Ç"]
programingLabs = ["#6","#7","#8","#9"]
discretLabs = ["#1","#2","#3","#4","#5"]

GroopList = ['1302']
peopleName = ['–ò–ª—å—è']
REG = ['213231','43151341']
class menu(StatesGroup):
    start = State()
    main = State()
    generate = State()
    stat = State()

class register(StatesGroup):
    Start = State()
    Groop = State()
    FullName = State()
class subjects(StatesGroup):
    waitingLabsGenerated = State()
    waitingLabsStates = State()
    add_comment = State()
    display_laboratory = State()

class Full_Name(StatesGroup):
    Name = State()

class InformationLabs(StatesGroup):
    lab1 = State()
    lab2 = State()
    lab3 = State()
    lab4 = State()
    lab5 = State()
    Robot = State()

Welcom = (
    '–ü—Ä–∏–≤–µ—Ç! üëã\n'
    '–¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å–≤—É–µ—Ç –ë–æ—Ç.\n \n'
    '–Ø –º–æ–≥—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —Ç–µ–±—è QR-code –∏ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–≤–æ–∏–º –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–º —Ä–∞–±–æ—Ç–∞–º.\n'
    '–í—Å—ë —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å—É—â–µ—Å—Ç–≤–æ—è–µ—Ç—Å—è –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–æ–∫ –≤–Ω–∏–∑—É –∏–ª–∏ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ç–≤–µ—Ç—Å–≤—É—é—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–Ω–æ–ø–æ–∫\n \n'
    '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n'
    'üìç /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã (‚ùóÔ∏è- –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ—Ç —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π)\n'
    'üìç /menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n'
    'üìç /help - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n'
)

printHelp = (
    '–ó–∞–ø—É—Ç–∞–ª—Å—è? –î–µ—Ä–∂–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n'
    'üìç /start - –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã (‚ùóÔ∏è- –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ—Ç —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π\n'
    'üìç /menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n'
    'üìç /help - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n'
)

printMainMenu = (
    '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:\n'
    'üìç–ì–µ–Ω–µ—Ä–∞—Ü–∏—è - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-code –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–∞–º–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç–µ\n'
    'üìç–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞—Ö'
)

printRegister = (
    '–í—ã –Ω–µ –∑–∞—Ä–∏–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã. –ü–æ–∂–∞–ª–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'
)


def student_registration_required(handler):
    @wraps(handler)
    async def wrapper(message: types.Message, state: FSMContext, *args, **kwargs):
        chat_id = message.chat.id
        if await is_student_register(chat_id):
            return await handler(message, state, *args, **kwargs)
        else:
            await register.Start.set()
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(*buttonRregister)
            await message.answer(printRegister, reply_markup=keyboard)

    return wrapper


@dp.message_handler(commands=['start'], state="*")
@student_registration_required
async def main(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*goMenu)
    await message.answer(Welcom, reply_markup=keyboard)
    await menu.start.set()


@dp.message_handler(state=register.Start)
async def startRegister(message: types.Message, state: FSMContext):
    await state.update_data(user_Register=message.text)
    if message.text not in buttonRregister:
        await message.answer("–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!")
        return
    await register.Groop.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –≥—Ä—É–ø–ø—É", reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(state=menu.start)
async def startMenu(message: types.Message, state: FSMContext):
    await state.update_data(user_Start=message.text)
    if message.text not in goMenu:
        await message.answer("‚ùóÔ∏è –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ùóÔ∏è")
        return
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*mainMenu)
    await message.answer(printMainMenu,reply_markup=keyboard)
    await menu.main.set()

@dp.message_handler(commands=['menu'])
@student_registration_required
async def commadMenu(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*mainMenu)
    await menu.main.set()

@dp.message_handler(commands=['help'])
async def helpMenu(message: types.Message):
    await message.answer(printHelp)

@dp.message_handler(state=register.Groop)
async def register_FullName(message: types.Message, state: FSMContext):
    await state.update_data(Groop=message.text)
    try:
        get_group = sync_to_async(EducationalGroup.objects.get)
        group = await get_group(number=message.text)
    except EducationalGroup.DoesNotExist:
        await message.answer("–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç –≤ –±–∞–∑–µ")
        return
    await state.update_data(group=group)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –§–ò–û. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è:")
    await register.FullName.set()

@dp.message_handler(state=register.FullName)
async def register_FullName(message: types.Message, state: FSMContext):
    await state.update_data(FullName=message.text)
    #–û–±—Ä–∞–±–æ—Ç–∫–∞ –§–ò–û (–†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞, –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ id, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î(–ò–º—è, –§–∞–º–∏–ª–∏—è, –û—Ç—á–µ—Å—Ç–≤–æ, –≥—Ä—É–ø–ø–∞, id))
    try:
        name, surname, patronymic = message.text.split(' ')
        chat = message.chat.id
        async with AsyncAtomicContext():
            user, created = await sync_to_async(CustomUser.objects.get_or_create)(
                name=name,
                surname=surname,
                patronymic=patronymic,
                username=message.from_user.id,
                role=CustomUser.ROLE_STUDENT,
            )

            if created:
                data = await state.get_data()
                group = data.get('group')
                student = await sync_to_async(Student.objects.create)(
                    user=user,
                    group=group,
                    chat=chat,
                )
                await sync_to_async(create_laboratory_status_one_student)(student)
                await message.answer(f"–°—Ç—É–¥–µ–Ω—Ç {user.name} {user.surname} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            else:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—É–¥–µ–Ω—Ç–æ–º")

    except Exception as e:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞: " + str(e))
        return
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*mainMenu)
    await message.answer(printMainMenu,reply_markup=keyboard)
    await menu.main.set()

@dp.message_handler(state=menu.main)
async def wait_menu(message: types.Message, state: FSMContext):
    await state.update_data(subject_Lab=message.text)
    try:
        async with AsyncAtomicContext():
            student = await sync_to_async(Student.objects.get)(chat=message.chat.id)
            laboratory_states = await sync_to_async(Laboratory_Status.objects.filter)(student=student)
            subjects_title = set(
                await sync_to_async(lambda: [
                    item.laboratory.educational.title for item in laboratory_states])()
            )
            await state.update_data(laboratory_states=laboratory_states)
            await state.update_data(subjects_title=subjects_title)
            await state.update_data(student=student)

    except Exception as e:
        print(str(e))
    if (message.text not in mainMenu):
        await message.answer("‚ùóÔ∏è –¢–∞–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ ‚ùóÔ∏èÔ∏è")
        return
    if (message.text == "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è"):
        await menu.generate.set()
    elif (message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"):
        await menu.stat.set()

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*subjects_title)
    keyboard.add(*backButton)
    await message.answer("–í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç: ", reply_markup=keyboard)


@dp.message_handler(state=[menu.stat, menu.generate])
async def laboratory_handler(message: types.Message, state: FSMContext):
    await state.update_data(lab=message.text)
    data = await state.get_data()
    if message.text in backButton[0]:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*mainMenu)
        await message.answer(printMainMenu, reply_markup=keyboard)
        await menu.main.set()
    else:
        try:
            laboratory_states = data.get('laboratory_states')
            laboratory_states_filter_subject =  await sync_to_async(
                lambda: [
                    x for x in laboratory_states if x.laboratory.educational.title == message.text
                ]
            )()
            laboratory_states_title = [x.laboratory.title for x in laboratory_states_filter_subject]
            await state.update_data(laboratory_states_title=laboratory_states_title)
            await state.update_data(educational=message.text)
        except Exception as e:
            print(str(e))

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*laboratory_states_title)
        keyboard.add(*backButton)
        current_state = await state.get_state()
        if current_state == menu.generate.state:
            await subjects.waitingLabsGenerated.set()
        elif current_state == menu.stat.state:
            await subjects.waitingLabsStates.set()

        await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é —Ä–∞–±–æ—Ç—É: ", reply_markup=keyboard)


@dp.message_handler(state=[subjects.waitingLabsGenerated, subjects.waitingLabsStates])
async def InfNumberLab(message: types.Message, state: FSMContext):
    await state.update_data(numbers=message.text)
    data = await state.get_data()
    if message.text == backButton[0]:
        await menu.generate.set() # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        subjects_title = data.get('subjects_title')
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*subjects_title)
        keyboard.add(*backButton)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç: ", reply_markup=keyboard)
    else:
        student = data.get('student')
        educational_title = data.get('educational')
        current_state = await state.get_state()
        await state.update_data(title_lab=message.text)
        if current_state == subjects.waitingLabsGenerated.state:
            await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é {message.text.lower()} –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ {educational_title}.\n")
            await subjects.add_comment.set()
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(*main_menu_button)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", reply_markup=keyboard)
        elif current_state == subjects.waitingLabsStates.state:
            await display_laboratory_state(state, message.chat.id)



@dp.message_handler(state=subjects.add_comment)
async def add_comment_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if message.text == main_menu_button[0]:
        await menu.main.set()
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*mainMenu)
        await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–∏–≤–µ: ", reply_markup=keyboard)
    else:
        try:
            laboratory_status = await get_laboratory_status(data)
            laboratory_status_id = laboratory_status.id
            current_datetime_str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            if laboratory_status.student_status == laboratory_status.STUDENT_STATUS_NOT_GENERATED:
                path_photo = await generator_qr(laboratory_status_id)
                laboratory_status.student_comment = f"({current_datetime_str}): {message.text}\n\n"
                laboratory_status.student_status = laboratory_status.STUDENT_STATUS_GENERATED
                with open(path_photo, 'rb') as photo:
                    await message.answer("QR —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
                    await bot.send_photo(chat_id=message.chat.id, photo=photo)
            else:
                laboratory_status.student_comment = f"{laboratory_status.student_comment}({current_datetime_str}): {message.text}\n\n"
                await message.answer("–î–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω—ã, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å qr –∫–æ–¥–æ–º —Å –ø—Ä–æ—à–ª–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")

            await sync_to_async(laboratory_status.save)()
            await menu.main.set()
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(*mainMenu)
            await message.answer("–í—ã–±–∏—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–∏–≤–µ: ", reply_markup=keyboard)

        except Exception as e:
            print(str(e))


async def display_laboratory_state(state: FSMContext, chat_id):
    data = await state.get_data()
    laboratory_title = data.get('title_lab')
    laboratory_status = await get_laboratory_status(data)
    laboratory_status_info = (f"–°—Ç–∞—Ç—É—Å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã {laboratory_title}, id {laboratory_status.id}:\n\n"
                              f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–¥–∞—á–∏ - {laboratory_status.status}\n\n"
                              f"–°–æ—è—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º - {laboratory_status.additional_status}\n\n"
                              f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR –∫–æ–¥–∞ - {laboratory_status.student_status}\n\n"
                              f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è - \n{laboratory_status.lecturer_comment}\n\n"
                              f"–í–∞—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ - \n{laboratory_status.student_comment}\n\n")
    await bot.send_message(text=laboratory_status_info, chat_id=chat_id)
    await menu.main.set()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*mainMenu)
    await bot.send_message(text="–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–∏–≤–µ: ", reply_markup=keyboard, chat_id=chat_id)


@dp.message_handler(state=Full_Name.Name)
async def User_Name(message: types.Message, state: FSMContext):
    await state.update_data()

@dp.message_handler(state=menu.stat)
async def statistic(message: types.Message, state: FSMContext):
    await state.update_data(states = message.text)
    if message.text == backButton[0]:
        await menu.main.set()
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(*mainMenu)
        await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–∏–≤–µ: ", reply_markup=keyboard)

